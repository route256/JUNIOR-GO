// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/gateway.proto

package getaway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_GetMessagesSummary_FullMethodName = "/gateway.Gateway/GetMessagesSummary"
	Gateway_PullMessages_FullMethodName       = "/gateway.Gateway/PullMessages"
	Gateway_PushMessages_FullMethodName       = "/gateway.Gateway/PushMessages"
	Gateway_ExchangeMessages_FullMethodName   = "/gateway.Gateway/ExchangeMessages"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	GetMessagesSummary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MessagesSummary, error)
	PullMessages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PullMessagesResponse, error)
	PushMessages(ctx context.Context, in *PushMessagesRequest, opts ...grpc.CallOption) (*PushMessagesRequestResponse, error)
	ExchangeMessages(ctx context.Context, in *ExchangeMessagesRequest, opts ...grpc.CallOption) (*ExchangeMessagesResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetMessagesSummary(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MessagesSummary, error) {
	out := new(MessagesSummary)
	err := c.cc.Invoke(ctx, Gateway_GetMessagesSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PullMessages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PullMessagesResponse, error) {
	out := new(PullMessagesResponse)
	err := c.cc.Invoke(ctx, Gateway_PullMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PushMessages(ctx context.Context, in *PushMessagesRequest, opts ...grpc.CallOption) (*PushMessagesRequestResponse, error) {
	out := new(PushMessagesRequestResponse)
	err := c.cc.Invoke(ctx, Gateway_PushMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ExchangeMessages(ctx context.Context, in *ExchangeMessagesRequest, opts ...grpc.CallOption) (*ExchangeMessagesResponse, error) {
	out := new(ExchangeMessagesResponse)
	err := c.cc.Invoke(ctx, Gateway_ExchangeMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	GetMessagesSummary(context.Context, *emptypb.Empty) (*MessagesSummary, error)
	PullMessages(context.Context, *emptypb.Empty) (*PullMessagesResponse, error)
	PushMessages(context.Context, *PushMessagesRequest) (*PushMessagesRequestResponse, error)
	ExchangeMessages(context.Context, *ExchangeMessagesRequest) (*ExchangeMessagesResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) GetMessagesSummary(context.Context, *emptypb.Empty) (*MessagesSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesSummary not implemented")
}
func (UnimplementedGatewayServer) PullMessages(context.Context, *emptypb.Empty) (*PullMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullMessages not implemented")
}
func (UnimplementedGatewayServer) PushMessages(context.Context, *PushMessagesRequest) (*PushMessagesRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMessages not implemented")
}
func (UnimplementedGatewayServer) ExchangeMessages(context.Context, *ExchangeMessagesRequest) (*ExchangeMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeMessages not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_GetMessagesSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetMessagesSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetMessagesSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetMessagesSummary(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PullMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PullMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_PullMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PullMessages(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PushMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PushMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_PushMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PushMessages(ctx, req.(*PushMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ExchangeMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ExchangeMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_ExchangeMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ExchangeMessages(ctx, req.(*ExchangeMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessagesSummary",
			Handler:    _Gateway_GetMessagesSummary_Handler,
		},
		{
			MethodName: "PullMessages",
			Handler:    _Gateway_PullMessages_Handler,
		},
		{
			MethodName: "PushMessages",
			Handler:    _Gateway_PushMessages_Handler,
		},
		{
			MethodName: "ExchangeMessages",
			Handler:    _Gateway_ExchangeMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gateway.proto",
}
